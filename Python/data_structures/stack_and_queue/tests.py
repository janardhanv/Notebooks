#!env python

from ADT_Queue import ArrayQueue, LinkedQueue
from ADT_Stack import ArrayStack, LinkedStack
from ADT_Deque import LinkedDeque

    
def test_ArrayStack():
    print(" >> Testing ArrayStack ADT")
    L = [333, 444, 555]
    print(f" >> Build ArrayStack and initialize with {L}")
    S = ArrayStack(L)
    print(" >> Pushing 10, 20, 30")
    S.push(10)
    S.push(20)
    S.push(30)
    print(S)
    print(f"S.pop(): {S.pop()}")
    print(" >> Pushing 40, and __iadd__ 100")
    S.push(40)
    S += 100
    print(f"S.top(): {S.top()}")
    print(" >> Pushing 50")
    S.push(50)
    print(f"Current stack length: {len(S)}")
    print(S)
    print(f"Does S contains 555? {555 in S}")
    print(f"Does S contains 556? {556 in S}")
    print(f"Which index is is 555? {S.index(555)}")
    print(f"Which index is is 556? {S.index(556)}")
    print("...now reverse this stack")
    S.reverse()
    print(" >> push 50")
    S.push(50)
    print(S)
    print(f"Occurrences of 50? {S.count(50)}")
    print(f"Occurrences of 51? {S.count(51)}")
    print()

def test_LinkedStack():
    print(" >> Testing LinkedStack ADT") 
    L = [333, 444, 555]
    print(f" >> Build LinkedStack and initialize with {L}")
    S = LinkedStack(L)
    print(" >> Pushing 10, 20, 30")
    S.push(10)
    S.push(20)
    S.push(30)
    print(S)
    print(f"S.pop(): {S.pop()}")
    print(" >> Pushing 40, and __iadd__ 100")
    S.push(40)
    S += 100
    print(f"S.top(): {S.top()}")
    print(" >> Pushing 50")
    S.push(50)
    print(f"Current stack length: {len(S)}")
    print(S)
    print(f"Does S contains 555? {555 in S}")
    print(f"Does S contains 556? {556 in S}")
    print(f"Which index is is 555? {S.index(555)}")
    print(f"Which index is is 556? {S.index(556)}")
    print("...now reverse this stack")
    S.reverse()
    print(" >> push 50")
    S.push(50)
    print(S)
    print(f"Occurrences of 50? {S.count(50)}")
    print(f"Occurrences of 51? {S.count(51)}")
    print()

def test_ArrayQueue():
    print(" >> Testing ArrayQueue ADT")
    L = [333, 555, 777]
    print(f" >> Build ArrayQueue and initialize with {L}")
    Q = ArrayQueue(L)
    print(" >> Enqueue 10, 20, 30")
    Q.enqueue(10)
    Q.enqueue(20)
    Q.enqueue(30)
    print(Q)
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 40, and __iadd__ 100")
    Q.enqueue(40)
    Q += 100
    print(f"Q.first(): {Q.first()}")
    print(" >> Enqueue 50")
    Q.enqueue(50)
    print(f"Current Queue Length: {len(Q)}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 1000, 2000")
    Q.enqueue(1000)
    Q.enqueue(2000)
    print(Q)
    print(f"Does Q contains 100? {100 in Q}")
    print(f"Does Q contains 102? {102 in Q}")
    print(f"Which index is is 100? {Q.index(100)}")
    print(f"Which index is is 102? {Q.index(102)}")
    print("...now reverse this queue")
    Q.reverse()
    print(Q)
    print(" >> Enqueue 9")
    Q.enqueue(9)
    print(f"Q.first(): {Q.first()}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 50")
    Q.enqueue(50)
    print(Q)
    print(f"Occurrences of 50? {Q.count(50)}")
    print(f"Occurrences of 51? {Q.count(51)}")
    print()

def test_LinkedQueue():
    print(" >> Testing LinkedQueue ADT")
    L = [300, 500, 700]
    print(f" >> Build LinkedQueue and initialize with {L}")
    Q = LinkedQueue(L)
    print(" >> Enqueue 10, 20, 30")
    Q.enqueue(10)
    Q.enqueue(20)
    Q.enqueue(30)
    print(Q)
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 40, and __iadd__ 100")
    Q.enqueue(40)
    Q += 100
    print(f"Q.first(): {Q.first()}")
    print(" >> Enqueue 50")
    Q.enqueue(50)
    print(f"Current Queue Length: {len(Q)}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 1000, 2000")
    Q.enqueue(1000)
    Q.enqueue(2000)
    print(Q)
    print(f"Does Q contains 100? {100 in Q}")
    print(f"Does Q contains 102? {102 in Q}")
    print(f"Which index is is 100? {Q.index(100)}")
    print(f"Which index is is 102? {Q.index(102)}")
    print("...now reverse this queue")
    Q.reverse()
    print(Q)
    print(" >> Enqueue 9")
    Q.enqueue(9)
    print(f"Q.first(): {Q.first()}")
    print(f"Q.dequeue(): {Q.dequeue()}")
    print(" >> Enqueue 50")
    Q.enqueue(50)
    print(Q)
    print(f"Occurrences of 50? {Q.count(50)}")
    print(f"Occurrences of 51? {Q.count(51)}")
    print(Q)
    print()

def test_LinkedDeque():
    print(" >> Test LinkedDeque ADT")
    L = [300, 500, 700]
    print(f" >> Build LinkedDeque and initialize with {L}")
    D = LinkedDeque(L)
    print(" >> enqueue 10, 20, 30")
    D.enqueue(10)
    D.enqueue(20)
    D.enqueue(30)
    print(" >> enqueue_back -10, -20")
    D.enqueue_back(-10)
    D.enqueue_back(-20)
    print(D)
    print(f"D.dequeue(): {D.dequeue()}")
    print(f"D.dequeue_back(): {D.dequeue_back()}")
    print(D)
    print(f"D.front(): {D.front()}")
    print(f"D.back(): {D.back()}")
    print(f"Does D contains 700? {700 in D}")
    print(f"Does D contains 702? {702 in D}")
    D.enqueue(777)
    print(D)
    D.rotate(3)
    print(D)
    D.reverse()
    print(" >> enqueue 300")
    D.enqueue(300)
    print(D)
    print(f"Occurrences of 300? {D.count(300)}")
    print(f"Occurrences of 301? {D.count(301)}")
    print()

if __name__ == "__main__":
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    test_ArrayStack()
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    test_LinkedStack()
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    test_ArrayQueue()
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    test_LinkedQueue()
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    test_LinkedDeque()
